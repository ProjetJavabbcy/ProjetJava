/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.upstls3.projetstri;

import javax.swing.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author 21408116
 */
public class NewJFrame extends javax.swing.JFrame {
    
    String url = "jdbc:mysql://151.80.140.253/projet_java_bd";
    String login = "java";
    String passwd = "projetjava3166";
    String type;
    String mobilite_pc="Portable";
    String etat = "eteint";
    
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        text_area_salle.setEditable(false);
        text_area_equipement.setEditable(false);
        Connection cn =null;
        Statement st =null;
        
        try {
			Class.forName("com.mysql.jdbc.Driver");
			cn = DriverManager.getConnection(url, login, passwd);
			st = cn.createStatement();
                        
                        Salle s1 = new Salle(1,"init","univ",0,0);
                        String sql = "SELECT * FROM Salle;";
                        ResultSet rs = st.executeQuery(sql);
                        text_area_salle.setText("");
                        while (rs.next())
                        {
                          s1.numeroSalle = rs.getInt("num_salle");
                          s1.nom = rs.getString("nom_salle");
                          s1.emplacement = rs.getString("emplacement_salle");
                          s1.nbPostePossibles = rs.getInt("nb_poste_possible");
                          s1.nbPosteInstalles = rs.getInt("nb_poste_installe");
                          text_area_salle.setEditable(false);
                          text_area_salle.setText(text_area_salle.getText()+s1.getNumeroSalle()+"\t"+s1.getNom()+"\t"+s1.getEmplacement()+"\t"+s1.getNbPostePossibles()+"\t"+s1.getNbPosteInstalles()+" \n");
                        }
                        
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			try {
				cn.close();
				st.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
                }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        label_salle = new javax.swing.JLabel();
        label_ajout_salle = new javax.swing.JLabel();
        label_nom_salle = new javax.swing.JLabel();
        champ_salle = new javax.swing.JTextField();
        label_emplacement_salle = new javax.swing.JLabel();
        champ_emplacement_salle = new javax.swing.JTextField();
        label_poste_possible = new javax.swing.JLabel();
        champ_poste_possible = new javax.swing.JTextField();
        label_poste_installe = new javax.swing.JLabel();
        champ_poste_installe = new javax.swing.JTextField();
        bouton_valider_salle = new javax.swing.JButton();
        bouton_annuler_salle = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        label_equipement = new javax.swing.JLabel();
        label_ajout_equipement = new javax.swing.JLabel();
        label_type = new javax.swing.JLabel();
        ComboBox_type = new javax.swing.JComboBox();
        label_cpu = new javax.swing.JLabel();
        champ_cpu = new javax.swing.JTextField();
        label_ram = new javax.swing.JLabel();
        champ_ram = new javax.swing.JTextField();
        label_disque = new javax.swing.JLabel();
        champ_disque = new javax.swing.JTextField();
        label_carte_graphique = new javax.swing.JLabel();
        champ_carte_graphique = new javax.swing.JTextField();
        label_os = new javax.swing.JLabel();
        champ_os = new javax.swing.JTextField();
        label_num_salle = new javax.swing.JLabel();
        champ_num_salle = new javax.swing.JTextField();
        bouton_valider_equipement = new javax.swing.JButton();
        bouton_annuler_equipement = new javax.swing.JButton();
        label_adresse_mac = new javax.swing.JLabel();
        champ_adresse_mac = new javax.swing.JTextField();
        label_etat = new javax.swing.JLabel();
        Checkbox_allume = new javax.swing.JCheckBox();
        ComboBox_Mobilite = new javax.swing.JComboBox();
        label_mobilite = new javax.swing.JLabel();
        label_nombre_GE = new javax.swing.JLabel();
        champ_nb_GE = new javax.swing.JTextField();
        label_nombre_LAN = new javax.swing.JLabel();
        champ_nb_LAN = new javax.swing.JTextField();
        label_taille_ecran = new javax.swing.JLabel();
        champ_taille_ecran = new javax.swing.JTextField();
        label_marque = new javax.swing.JLabel();
        champ_marque = new javax.swing.JTextField();
        label_modele = new javax.swing.JLabel();
        champ_modele = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        text_area_salle = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        text_area_equipement = new javax.swing.JTextArea();
        label_numero_salle_equipement = new javax.swing.JLabel();
        champ_numero_salle_equipement = new javax.swing.JTextField();
        label_supprimer_salle = new javax.swing.JLabel();
        champ_supprimer_salle = new javax.swing.JTextField();
        bouton_supprimer_salle = new javax.swing.JButton();
        label_supprimer_equipement = new javax.swing.JLabel();
        champ_supprimer_equipement = new javax.swing.JTextField();
        bouton_supprimer_equipement = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label_salle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        label_salle.setText("Salles :");

        label_ajout_salle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        label_ajout_salle.setText("Ajouter Salle :");

        label_nom_salle.setText("Nom salle : ");

        champ_salle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                champ_salleActionPerformed(evt);
            }
        });

        label_emplacement_salle.setText("Emplacement salle :");

        champ_emplacement_salle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                champ_emplacement_salleActionPerformed(evt);
            }
        });

        label_poste_possible.setText("Nb postes possibles : ");

        label_poste_installe.setText("Nb postes install√©s : ");

        bouton_valider_salle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bouton_valider_salle.setForeground(new java.awt.Color(0, 153, 102));
        bouton_valider_salle.setText("Valider");
        bouton_valider_salle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bouton_valider_salleActionPerformed(evt);
            }
        });

        bouton_annuler_salle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bouton_annuler_salle.setForeground(new java.awt.Color(204, 0, 0));
        bouton_annuler_salle.setText("Annuler");
        bouton_annuler_salle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bouton_annuler_salleActionPerformed(evt);
            }
        });

        label_equipement.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        label_equipement.setText("Equipements : ");

        label_ajout_equipement.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        label_ajout_equipement.setText("Ajouter Equipement :");

        label_type.setText("Type : ");

        ComboBox_type.setBackground(new java.awt.Color(153, 153, 153));
        ComboBox_type.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ComboBox_type.setForeground(new java.awt.Color(0, 102, 255));
        ComboBox_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Ordinateur", "Tablette", "Routeur" }));
        ComboBox_type.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBox_typeItemStateChanged(evt);
            }
        });
        ComboBox_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBox_typeActionPerformed(evt);
            }
        });

        label_cpu.setText("CPU : ");

        champ_cpu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                champ_cpuActionPerformed(evt);
            }
        });

        label_ram.setText("RAM (MO) :");

        label_disque.setText("Disque (GO): ");

        label_carte_graphique.setText("Carte graphique (MO) : ");

        champ_carte_graphique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                champ_carte_graphiqueActionPerformed(evt);
            }
        });

        label_os.setText("OS :");

        champ_os.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                champ_osActionPerformed(evt);
            }
        });

        label_num_salle.setText("Numero salle :");

        champ_num_salle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                champ_num_salleActionPerformed(evt);
            }
        });

        bouton_valider_equipement.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bouton_valider_equipement.setForeground(new java.awt.Color(0, 153, 102));
        bouton_valider_equipement.setText("Valider");
        bouton_valider_equipement.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        bouton_valider_equipement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bouton_valider_equipementActionPerformed(evt);
            }
        });

        bouton_annuler_equipement.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bouton_annuler_equipement.setForeground(new java.awt.Color(204, 0, 0));
        bouton_annuler_equipement.setText("Annuler");
        bouton_annuler_equipement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bouton_annuler_equipementActionPerformed(evt);
            }
        });

        label_adresse_mac.setText("@Mac :");

        label_etat.setText("Etat (non coch√© = √©teint) :");

        Checkbox_allume.setText("Allum√©");
        Checkbox_allume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Checkbox_allumeActionPerformed(evt);
            }
        });

        ComboBox_Mobilite.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Portable", "Fixe" }));
        ComboBox_Mobilite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboBox_MobiliteItemStateChanged(evt);
            }
        });
        ComboBox_Mobilite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBox_MobiliteActionPerformed(evt);
            }
        });

        label_mobilite.setText("Mobilit√© :");

        label_nombre_GE.setText("Nombre Ports GE :");

        champ_nb_GE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                champ_nb_GEActionPerformed(evt);
            }
        });

        label_nombre_LAN.setText("Nombre Ports LAN :");

        label_taille_ecran.setText("Taille Ecran (en pouces) :");

        label_marque.setText("Marque : ");

        champ_marque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                champ_marqueActionPerformed(evt);
            }
        });

        label_modele.setText("Mod√®le :");

        text_area_salle.setColumns(20);
        text_area_salle.setRows(5);
        jScrollPane3.setViewportView(text_area_salle);

        text_area_equipement.setColumns(20);
        text_area_equipement.setRows(5);
        jScrollPane1.setViewportView(text_area_equipement);

        label_numero_salle_equipement.setText("Num√©ro salle :");

        champ_numero_salle_equipement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                champ_numero_salle_equipementActionPerformed(evt);
            }
        });

        label_supprimer_salle.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        label_supprimer_salle.setText("Entrer le num√©ro de la salle pour la supprimer :");

        champ_supprimer_salle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                champ_supprimer_salleActionPerformed(evt);
            }
        });

        bouton_supprimer_salle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bouton_supprimer_salle.setForeground(new java.awt.Color(204, 0, 0));
        bouton_supprimer_salle.setText("Supprimer la salle");
        bouton_supprimer_salle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bouton_supprimer_salleActionPerformed(evt);
            }
        });

        label_supprimer_equipement.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        label_supprimer_equipement.setText("Entrer l'identifiant de l'√©quipement pour le supprimer :");

        champ_supprimer_equipement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                champ_supprimer_equipementActionPerformed(evt);
            }
        });

        bouton_supprimer_equipement.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        bouton_supprimer_equipement.setForeground(new java.awt.Color(204, 0, 0));
        bouton_supprimer_equipement.setText("Supprimer √©quipement");
        bouton_supprimer_equipement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bouton_supprimer_equipementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSeparator1)
                .addGap(479, 479, 479))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_ajout_equipement)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ComboBox_type, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(label_type)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(champ_numero_salle_equipement, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(label_numero_salle_equipement, javax.swing.GroupLayout.Alignment.LEADING)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(label_marque)
                                            .addComponent(champ_marque, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(champ_modele, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(label_modele))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(champ_os, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(3, 3, 3)
                                                .addComponent(label_os)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(label_etat)
                                            .addComponent(Checkbox_allume)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(label_mobilite)
                                                    .addComponent(ComboBox_Mobilite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(champ_cpu, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(8, 8, 8)
                                                        .addComponent(label_cpu)))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(label_ram, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addGap(37, 37, 37))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(champ_ram, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(champ_disque, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(label_disque)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(label_nombre_GE)
                                                    .addComponent(champ_nb_GE, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(18, 18, 18)
                                                        .addComponent(label_nombre_LAN))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(18, 18, 18)
                                                        .addComponent(champ_nb_LAN, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(bouton_valider_equipement, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(42, 42, 42)
                                                .addComponent(bouton_annuler_equipement, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(label_adresse_mac)
                                                    .addComponent(champ_adresse_mac, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(label_carte_graphique, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(champ_carte_graphique, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(label_taille_ecran, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(champ_taille_ecran, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label_equipement)
                            .addComponent(label_supprimer_equipement)
                            .addComponent(champ_supprimer_equipement, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bouton_supprimer_equipement)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(label_ajout_salle)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(label_num_salle)
                                            .addComponent(champ_num_salle, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(33, 33, 33)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(label_nom_salle)
                                            .addComponent(champ_salle, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(bouton_valider_salle, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(label_emplacement_salle)
                                            .addComponent(champ_emplacement_salle, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(50, 50, 50)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(champ_poste_possible, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(label_poste_possible))
                                        .addGap(40, 40, 40)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(label_poste_installe)
                                            .addComponent(champ_poste_installe, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(bouton_annuler_salle, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label_supprimer_salle)
                            .addComponent(champ_supprimer_salle, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bouton_supprimer_salle))))
                .addContainerGap(800, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(label_salle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(label_salle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label_supprimer_salle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(champ_supprimer_salle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(bouton_supprimer_salle, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_ajout_salle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_nom_salle)
                    .addComponent(label_emplacement_salle)
                    .addComponent(label_poste_installe)
                    .addComponent(label_num_salle)
                    .addComponent(label_poste_possible))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(champ_salle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(champ_emplacement_salle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(champ_poste_possible, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(champ_num_salle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(champ_poste_installe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bouton_annuler_salle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bouton_valider_salle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(label_equipement)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_ajout_equipement)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label_modele, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(champ_modele, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label_os)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(champ_os, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Checkbox_allume)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label_etat)
                                        .addGap(25, 25, 25))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label_marque)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(champ_marque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(label_mobilite)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(ComboBox_Mobilite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(label_ram)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(champ_ram, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label_carte_graphique)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(champ_carte_graphique, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label_disque)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(champ_disque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label_adresse_mac)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(champ_adresse_mac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label_cpu)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(champ_cpu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(label_taille_ecran)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(champ_taille_ecran, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(label_nombre_GE)
                                        .addGap(2, 2, 2)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(champ_nb_GE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(champ_nb_LAN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(label_nombre_LAN))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(bouton_valider_equipement, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bouton_annuler_equipement, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label_type)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ComboBox_type, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(label_numero_salle_equipement)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(champ_numero_salle_equipement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addComponent(label_supprimer_equipement)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(champ_supprimer_equipement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(bouton_supprimer_equipement, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void champ_salleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_champ_salleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_champ_salleActionPerformed

    private void ComboBox_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBox_typeActionPerformed
        // TODO add your handling code here:
        JComboBox cb = (JComboBox)evt.getSource();
        String type_combo = (String)cb.getSelectedItem();
        //updateLabel(type_combo);
        type=type_combo;
        
        Connection cn =null;
        Statement st =null;
        
        try {
			Class.forName("com.mysql.jdbc.Driver");
			cn = DriverManager.getConnection(url, login, passwd);
			st = cn.createStatement();
                        
                        if(type.equals("Ordinateur") == true)
                        {
                            Ordinateur o = new Ordinateur(1,"msi", "ge80", "i3", 4, "w7", "allume", "AA:BB:CC:DD:EE:FF", 1000, 1024, "portable", 1);
                            String sql = "SELECT * FROM Ordinateur;";
                            ResultSet rs = st.executeQuery(sql);
                            text_area_equipement.setText("");
                            while (rs.next())
                            {
                              o.id = rs.getInt("id_ordinateur");
                              o.marque = rs.getString("marque_ordinateur");
                              o.modele = rs.getString("modele_ordinateur");
                              o.cpu = rs.getString("cpu_ordinateur");
                              o.ram = rs.getInt("ram_ordinateur");
                              o.os = rs.getString("os_ordinateur");
                              o.etat = rs.getString("etat_ordinateur");
                              o.adresseMAC = rs.getString("adresse_MAC_ordinateur");
                              o.disque = rs.getInt("disque_ordinateur");
                              o.carteGraphique = rs.getInt("carte_graphique_ordinateur");
                              o.numero_salle = rs.getInt("num_salle");
                              o.mobilite = rs.getString("type_ordinateur");

                              text_area_equipement.setEditable(false);
                              text_area_equipement.setText(text_area_equipement.getText()+o.getId()+"\t"+type+"\t"+o.getMobilite()+"\t"+o.getEtat()+"\t"+o.getMarque()+"\t"+o.getModele()+"\t"+o.getCpu()+"\t"+o.getRam()+"\t"+o.getDisque()+"\t"+o.getCarteGraphique()+"\t"+o.getOs()+"\t"+o.getAdresseMAC()+"\t"+o.getNumero_salle()+"\n");
                            }
                        }
                       
                        if(type.compareTo("Tablette") == 0)
                        { 
                            Tablette t = new Tablette(1,"dualcore", 4, "android", "allumee", "AA:BB:CC:DD:EE:CC", 32, 7, "Samsung", "tab", 1);
                            String sql = "SELECT * FROM Tablette;";
                            ResultSet rs = st.executeQuery(sql);
                            text_area_equipement.setText("");
                            
                            while (rs.next())
                            {
                              t.id = rs.getInt("id_tablette");
                              t.marque = rs.getString("marque_tablette");
                              t.modele = rs.getString("modele_tablette");
                              t.cpu = rs.getString("cpu_tablette");
                              t.ram = rs.getInt("ram_tablette");
                              t.os = rs.getString("os_tablette");
                              t.etat = rs.getString("etat_tablette");
                              t.adresseMAC = rs.getString("adresse_MAC_tablette");
                              t.disque = rs.getInt("disque_tablette");                            
                              t.numero_salle = rs.getInt("num_salle");
                              t.tailleEcran = rs.getInt("taille_tablette");

                              text_area_equipement.setEditable(false);
                              text_area_equipement.setText(text_area_equipement.getText()+t.getId()+"\t"+type+"\t"+t.getEtat()+"\t"+t.getMarque()+"\t"+t.getModele()+"\t"+t.getCpu()+"\t"+t.getRam()+"\t"+t.getDisque()+"\t"+t.getOs()+"\t"+t.getAdresseMAC()+"\t"+t.getTailleEcran()+"\t"+t.getNumero_salle()+"\n");
                            }
                        }
                        
                        if(type.equals("Routeur") == true)
                        {
                            Routeur r = new Routeur(1,"Cisco", "RV042G", "IOS", "allumee", 2, 8, 1);
                            String sql = "SELECT * FROM Routeur;";
                            ResultSet rs = st.executeQuery(sql);
                            text_area_equipement.setText("");
                            
                            while (rs.next())
                            {
                              r.id = rs.getInt("id_routeur");
                              r.marque = rs.getString("marque_routeur");
                              r.modele = rs.getString("modele_routeur");
                              r.os = rs.getString("os_routeur");
                              r.etat = rs.getString("etat_routeur");
                              r.nbPortsGoEthernet = rs.getInt("nb_port_go_ethernet");
                              r.nbPortsLAN = rs.getInt("nb_port_lan");
                              r.numero_salle = rs.getInt("num_salle");
                              
                              text_area_equipement.setEditable(false);
                              text_area_equipement.setText(text_area_equipement.getText()+r.getId()+"\t"+type+"\t"+r.getEtat()+"\t"+r.getMarque()+"\t"+r.getModele()+"\t"+r.getOs()+"\t"+r.getNbPortsGoEthernet()+"\t"+r.getNbPortsLAN()+"\t"+r.getNumero_salle()+"\n");
                            }
                        }
                     
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			try {
				cn.close();
				st.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
                }
        
    }//GEN-LAST:event_ComboBox_typeActionPerformed

    private void champ_carte_graphiqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_champ_carte_graphiqueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_champ_carte_graphiqueActionPerformed

    private void champ_osActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_champ_osActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_champ_osActionPerformed

    private void bouton_valider_salleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bouton_valider_salleActionPerformed
        // TODO add your handling code here:
        
        int num_salle = Integer.parseInt(champ_num_salle.getText()) ;
        int poste_possible = Integer.parseInt(champ_poste_possible.getText()) ;
        int poste_installe = Integer.parseInt(champ_poste_installe.getText()) ;
        String nom_salle = champ_salle.getText();
        String emplacement = champ_emplacement_salle.getText();
       
        Salle s1 = new Salle(num_salle,nom_salle,emplacement,poste_possible,poste_installe);
        Connection cn =null;
        Statement st =null;
        
        try {
			Class.forName("com.mysql.jdbc.Driver");
			cn = DriverManager.getConnection(url, login, passwd);
			st = cn.createStatement();
                        String sql = "INSERT INTO Salle(num_salle,nom_salle,emplacement_salle,nb_poste_possible,nb_poste_installe) "
                                + "VALUES("+s1.getNumeroSalle()+",'"+s1.getNom()+"','"+s1.getEmplacement()+"',"+s1.getNbPostePossibles()+","+s1.getNbPosteInstalles()+")";
                        st.executeUpdate(sql);
                        sql = "SELECT * FROM Salle;";
                        ResultSet rs = st.executeQuery(sql);
                        text_area_salle.setText("");
                        while (rs.next())
                        {
                          s1.numeroSalle = rs.getInt("num_salle");
                          s1.nom = rs.getString("nom_salle");
                          s1.emplacement = rs.getString("emplacement_salle");
                          s1.nbPostePossibles = rs.getInt("nb_poste_possible");
                          s1.nbPosteInstalles = rs.getInt("nb_poste_installe");
                          text_area_salle.setEditable(false);
                          text_area_salle.setText(text_area_salle.getText()+s1.getNumeroSalle()+"\t"+s1.getNom()+"\t"+s1.getEmplacement()+"\t"+s1.getNbPostePossibles()+"\t"+s1.getNbPosteInstalles()+" \n");
                        }
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			try {
				cn.close();
				st.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
                }
        
    }//GEN-LAST:event_bouton_valider_salleActionPerformed

    private void champ_num_salleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_champ_num_salleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_champ_num_salleActionPerformed

    private void champ_emplacement_salleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_champ_emplacement_salleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_champ_emplacement_salleActionPerformed

    private void bouton_annuler_salleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bouton_annuler_salleActionPerformed
        // TODO add your handling code here:
        champ_num_salle.setText("");
        champ_salle.setText("");
        champ_emplacement_salle.setText("");
        champ_poste_possible.setText("");
        champ_poste_installe.setText("");
    }//GEN-LAST:event_bouton_annuler_salleActionPerformed

    private void bouton_valider_equipementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bouton_valider_equipementActionPerformed
        // TODO add your handling code here:
        String cpu = champ_cpu.getText();
        int ram = Integer.parseInt(champ_ram.getText());
        int disque = Integer.parseInt(champ_disque.getText());
        String os = champ_os.getText();
        String adresse_mac = champ_adresse_mac.getText();
        String champ_etat = etat;
        int num_salle = Integer.parseInt(champ_numero_salle_equipement.getText());
        String marque = champ_marque.getText();
        String modele = champ_modele.getText();
     

        Connection cn =null;
        Statement st =null;
        
        try {
			Class.forName("com.mysql.jdbc.Driver");
			cn = DriverManager.getConnection(url, login, passwd);
			st = cn.createStatement();
                        
                        if(type.equals("Ordinateur") == true)
                        {
                            int carte_graphique = Integer.parseInt(champ_carte_graphique.getText());
                            System.out.println(mobilite_pc);
                            Ordinateur o = new Ordinateur(1,marque, modele, cpu, ram, os,champ_etat, adresse_mac, disque,carte_graphique,mobilite_pc,num_salle);
                            String sql = "INSERT INTO Ordinateur(marque_ordinateur,modele_ordinateur,cpu_ordinateur,ram_ordinateur,os_ordinateur,etat_ordinateur,adresse_MAC_ordinateur,disque_ordinateur,type_ordinateur,carte_graphique_ordinateur,num_salle)"
                                + "VALUES('"+o.getMarque()+"','"+o.getModele()+"','"+o.getCpu()+"',"+o.getRam()+",'"+o.getOs()+"','"+o.getEtat()+"','"+o.getAdresseMAC()+"','"+o.getDisque()+"','"+o.getMobilite()+"',"+o.getCarteGraphique()+","+o.getNumero_salle()+");";
                            st.executeUpdate(sql);
                            sql= "SELECT nb_poste_installe FROM Salle WHERE num_salle="+num_salle+";";
                            ResultSet rs = st.executeQuery(sql);
                            int nb_old_poste_installe=0;
                            while (rs.next())
                            {
                                nb_old_poste_installe = rs.getInt("nb_poste_installe");
                            }
                            nb_old_poste_installe = (nb_old_poste_installe + 1);
                            sql = "UPDATE Salle SET nb_poste_installe = "+nb_old_poste_installe+" WHERE num_salle="+num_salle+";";
                            st.executeUpdate(sql);
                            sql = "SELECT * FROM Ordinateur;";
                            rs = st.executeQuery(sql);
                            text_area_equipement.setText("");
                            while (rs.next())
                            {
                              o.id = rs.getInt("id_ordinateur");
                              o.marque = rs.getString("marque_ordinateur");
                              o.modele = rs.getString("modele_ordinateur");
                              o.cpu = rs.getString("cpu_ordinateur");
                              o.ram = rs.getInt("ram_ordinateur");
                              o.os = rs.getString("os_ordinateur");
                              o.etat = rs.getString("etat_ordinateur");
                              o.adresseMAC = rs.getString("adresse_MAC_ordinateur");
                              o.disque = rs.getInt("disque_ordinateur");
                              o.carteGraphique = rs.getInt("carte_graphique_ordinateur");
                              o.numero_salle = rs.getInt("num_salle");
                              o.mobilite = rs.getString("type_ordinateur");

                              text_area_equipement.setEditable(false);
                              text_area_equipement.setText(text_area_equipement.getText()+o.getId()+"\t"+type+"\t"+o.getMobilite()+"\t"+o.getEtat()+"\t"+o.getMarque()+"\t"+o.getModele()+"\t"+o.getCpu()+"\t"+o.getRam()+"\t"+o.getDisque()+"\t"+o.getCarteGraphique()+"\t"+o.getOs()+"\t"+o.getAdresseMAC()+"\t"+o.getNumero_salle()+"\n");
                            }
                            Salle s1 = new Salle(1,"init","univ",0,0);
                            sql = "SELECT * FROM Salle;";
                            rs = st.executeQuery(sql);
                            text_area_salle.setText("");
                            while (rs.next())
                            {
                              s1.numeroSalle = rs.getInt("num_salle");
                              s1.nom = rs.getString("nom_salle");
                              s1.emplacement = rs.getString("emplacement_salle");
                              s1.nbPostePossibles = rs.getInt("nb_poste_possible");
                              s1.nbPosteInstalles = rs.getInt("nb_poste_installe");
                              text_area_salle.setEditable(false);
                              text_area_salle.setText(text_area_salle.getText()+s1.getNumeroSalle()+"\t"+s1.getNom()+"\t"+s1.getEmplacement()+"\t"+s1.getNbPostePossibles()+"\t"+s1.getNbPosteInstalles()+" \n");
                            }
                        }
                       
                        if(type.compareTo("Tablette") == 0)
                        { 
                            int taille_ecran = Integer.parseInt(champ_taille_ecran.getText());
                            Tablette t = new Tablette(1,cpu, ram, os, etat, adresse_mac, disque, taille_ecran, marque, modele, num_salle);
                            String sql = "INSERT INTO Tablette(marque_tablette,modele_tablette,cpu_tablette,ram_tablette,os_tablette,etat_tablette,adresse_MAC_tablette,disque_tablette,taille_tablette,num_salle)"
                                + "VALUES('"+t.getMarque()+"','"+t.getModele()+"','"+t.getCpu()+"',"+t.getRam()+",'"+t.getOs()+"','"+t.getEtat()+"','"+t.getAdresseMAC()+"',"+t.getDisque()+","+t.getTailleEcran()+","+t.getNumero_salle()+");";
                            st.executeUpdate(sql);
                            sql= "SELECT nb_poste_installe FROM Salle WHERE num_salle="+num_salle+";";
                            ResultSet rs = st.executeQuery(sql);
                            int nb_old_poste_installe=0;
                            while (rs.next())
                            {
                                nb_old_poste_installe = rs.getInt("nb_poste_installe");
                            }
                            nb_old_poste_installe = (nb_old_poste_installe + 1);
                            sql = "UPDATE Salle SET nb_poste_installe = "+nb_old_poste_installe+" WHERE num_salle="+num_salle+";";
                            st.executeUpdate(sql);
                            sql = "SELECT * FROM Tablette;";
                            rs = st.executeQuery(sql);
                            text_area_equipement.setText("");
                            
                            while (rs.next())
                            {
                              t.id = rs.getInt("id_tablette");
                              t.marque = rs.getString("marque_tablette");
                              t.modele = rs.getString("modele_tablette");
                              t.cpu = rs.getString("cpu_tablette");
                              t.ram = rs.getInt("ram_tablette");
                              t.os = rs.getString("os_tablette");
                              t.etat = rs.getString("etat_tablette");
                              t.adresseMAC = rs.getString("adresse_MAC_tablette");
                              t.disque = rs.getInt("disque_tablette");                            
                              t.numero_salle = rs.getInt("num_salle");
                              t.tailleEcran = rs.getInt("taille_tablette");

                              text_area_equipement.setEditable(false);
                              text_area_equipement.setText(text_area_equipement.getText()+t.getId()+"\t"+type+"\t"+t.getEtat()+"\t"+t.getMarque()+"\t"+t.getModele()+"\t"+t.getCpu()+"\t"+t.getRam()+"\t"+t.getDisque()+"\t"+t.getOs()+"\t"+t.getAdresseMAC()+"\t"+t.getTailleEcran()+"\t"+t.getNumero_salle()+"\n");
                            }
                            Salle s1 = new Salle(1,"init","univ",0,0);
                            sql = "SELECT * FROM Salle;";
                            rs = st.executeQuery(sql);
                            text_area_salle.setText("");
                            while (rs.next())
                            {
                              s1.numeroSalle = rs.getInt("num_salle");
                              s1.nom = rs.getString("nom_salle");
                              s1.emplacement = rs.getString("emplacement_salle");
                              s1.nbPostePossibles = rs.getInt("nb_poste_possible");
                              s1.nbPosteInstalles = rs.getInt("nb_poste_installe");
                              text_area_salle.setEditable(false);
                              text_area_salle.setText(text_area_salle.getText()+s1.getNumeroSalle()+"\t"+s1.getNom()+"\t"+s1.getEmplacement()+"\t"+s1.getNbPostePossibles()+"\t"+s1.getNbPosteInstalles()+" \n");
                            }
                        }
                        
                        if(type.equals("Routeur") == true)
                        {
                            int nombre_ports_GE = Integer.parseInt(champ_nb_GE.getText());
                            int nombre_ports_LAN = Integer.parseInt(champ_nb_LAN.getText()); 
                            Routeur r = new Routeur(1,marque, modele, os, etat, nombre_ports_GE, nombre_ports_LAN, num_salle);
                            String sql = "INSERT INTO Routeur(marque_routeur,modele_routeur,os_routeur,etat_routeur,num_salle,nb_port_go_ethernet,nb_port_lan)"
                                + "VALUES('"+r.getMarque()+"','"+r.getModele()+"','"+r.getOs()+"','"+r.getEtat()+"',"+r.getNumero_salle()+","+r.getNbPortsGoEthernet()+","+r.getNbPortsLAN()+");";
                            st.executeUpdate(sql);
                            sql= "SELECT nb_poste_installe FROM Salle WHERE num_salle="+num_salle+";";
                            ResultSet rs = st.executeQuery(sql);
                            int nb_old_poste_installe=0;
                            while (rs.next())
                            {
                                nb_old_poste_installe = rs.getInt("nb_poste_installe");
                            }
                            nb_old_poste_installe = (nb_old_poste_installe + 1);
                            sql = "UPDATE Salle SET nb_poste_installe = "+nb_old_poste_installe+" WHERE num_salle="+num_salle+";";
                            st.executeUpdate(sql);
                            sql = "SELECT * FROM Routeur;";
                            rs = st.executeQuery(sql);
                            text_area_equipement.setText("");
                            
                            while (rs.next())
                            {
                              r.id = rs.getInt("id_routeur");
                              r.marque = rs.getString("marque_routeur");
                              r.modele = rs.getString("modele_routeur");
                              r.os = rs.getString("os_routeur");
                              r.etat = rs.getString("etat_routeur");
                              r.nbPortsGoEthernet = rs.getInt("nb_port_go_ethernet");
                              r.nbPortsLAN = rs.getInt("nb_port_lan");
                              r.numero_salle = rs.getInt("num_salle");
                              
                              text_area_equipement.setEditable(false);
                              text_area_equipement.setText(text_area_equipement.getText()+r.getId()+"\t"+type+"\t"+r.getEtat()+"\t"+r.getMarque()+"\t"+r.getModele()+"\t"+r.getOs()+"\t"+r.getNbPortsGoEthernet()+"\t"+r.getNbPortsLAN()+"\t"+r.getNumero_salle()+"\n");
                            }
                            Salle s1 = new Salle(1,"init","univ",0,0);
                            sql = "SELECT * FROM Salle;";
                            rs = st.executeQuery(sql);
                            text_area_salle.setText("");
                            while (rs.next())
                            {
                              s1.numeroSalle = rs.getInt("num_salle");
                              s1.nom = rs.getString("nom_salle");
                              s1.emplacement = rs.getString("emplacement_salle");
                              s1.nbPostePossibles = rs.getInt("nb_poste_possible");
                              s1.nbPosteInstalles = rs.getInt("nb_poste_installe");
                              text_area_salle.setEditable(false);
                              text_area_salle.setText(text_area_salle.getText()+s1.getNumeroSalle()+"\t"+s1.getNom()+"\t"+s1.getEmplacement()+"\t"+s1.getNbPostePossibles()+"\t"+s1.getNbPosteInstalles()+" \n");
                            }
                        }
                     
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			try {
				cn.close();
				st.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
                }   
                        
    }//GEN-LAST:event_bouton_valider_equipementActionPerformed

    private void Checkbox_allumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Checkbox_allumeActionPerformed
        // TODO add your handling code here
        JCheckBox checkbox = (JCheckBox)evt.getSource();
        String champ_etat;
        if(checkbox.isSelected())
            champ_etat = "allume";
        else
            champ_etat = "eteint";
        etat = champ_etat;
    }//GEN-LAST:event_Checkbox_allumeActionPerformed

    private void bouton_annuler_equipementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bouton_annuler_equipementActionPerformed
        // TODO add your handling code here:
        champ_adresse_mac.setText("");
        champ_carte_graphique.setText("");
        champ_cpu.setText("");
        champ_disque.setText("");
        champ_marque.setText("");
        champ_modele.setText("");
        champ_nb_GE.setText("");
        champ_nb_LAN.setText("");
        champ_numero_salle_equipement.setText("");
        champ_os.setText("");
        champ_ram.setText("");
        champ_taille_ecran.setText("");
        
    }//GEN-LAST:event_bouton_annuler_equipementActionPerformed

    private void ComboBox_typeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBox_typeItemStateChanged
        // TODO add your handling code here:
        JComboBox cb = (JComboBox)evt.getSource();
        String type_combo = (String)cb.getSelectedItem();
        updateLabel(type_combo);
        type = type_combo;
    }//GEN-LAST:event_ComboBox_typeItemStateChanged

    private void champ_marqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_champ_marqueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_champ_marqueActionPerformed

    private void champ_cpuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_champ_cpuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_champ_cpuActionPerformed

    private void champ_nb_GEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_champ_nb_GEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_champ_nb_GEActionPerformed

    private void champ_numero_salle_equipementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_champ_numero_salle_equipementActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_champ_numero_salle_equipementActionPerformed

    private void ComboBox_MobiliteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboBox_MobiliteItemStateChanged
        // TODO add your handling code here:
        JComboBox cb_mobi = (JComboBox)evt.getSource();
        String value_mobi = (String)cb_mobi.getSelectedItem();
        mobilite_pc = value_mobi;
    }//GEN-LAST:event_ComboBox_MobiliteItemStateChanged

    private void ComboBox_MobiliteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBox_MobiliteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboBox_MobiliteActionPerformed

    private void champ_supprimer_salleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_champ_supprimer_salleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_champ_supprimer_salleActionPerformed

    private void bouton_supprimer_salleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bouton_supprimer_salleActionPerformed
        // TODO add your handling code here:
        int num_salle = Integer.parseInt(champ_supprimer_salle.getText()) ;
        Connection cn =null;
        Statement st =null;
        
        try {
			Class.forName("com.mysql.jdbc.Driver");
			cn = DriverManager.getConnection(url, login, passwd);
			st = cn.createStatement();
                        String sql = "DELETE FROM Ordinateur WHERE num_salle="+num_salle+";";
                        st.executeUpdate(sql);
                        sql = "DELETE FROM Tablette WHERE num_salle="+num_salle+";";
                        st.executeUpdate(sql);
                        sql = "DELETE FROM Routeur WHERE num_salle="+num_salle+";";
                        st.executeUpdate(sql);
                        sql = "DELETE FROM Salle WHERE num_salle="+num_salle+";";
                        st.executeUpdate(sql);
                        
                        Salle s1 = new Salle(1,"init","univ",0,0);
                        sql = "SELECT * FROM Salle;";
                        ResultSet rs = st.executeQuery(sql);
                        text_area_salle.setText("");
                        while (rs.next())
                        {
                          s1.numeroSalle = rs.getInt("num_salle");
                          s1.nom = rs.getString("nom_salle");
                          s1.emplacement = rs.getString("emplacement_salle");
                          s1.nbPostePossibles = rs.getInt("nb_poste_possible");
                          s1.nbPosteInstalles = rs.getInt("nb_poste_installe");
                          text_area_salle.setEditable(false);
                          text_area_salle.setText(text_area_salle.getText()+s1.getNumeroSalle()+"\t"+s1.getNom()+"\t"+s1.getEmplacement()+"\t"+s1.getNbPostePossibles()+"\t"+s1.getNbPosteInstalles()+" \n");
                        }
                        champ_supprimer_salle.setText("");
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} finally {
			try {
				cn.close();
				st.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
                }
    }//GEN-LAST:event_bouton_supprimer_salleActionPerformed

    private void champ_supprimer_equipementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_champ_supprimer_equipementActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_champ_supprimer_equipementActionPerformed

    private void bouton_supprimer_equipementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bouton_supprimer_equipementActionPerformed
        // TODO add your handling code here:
        int id_equipement = Integer.parseInt(champ_supprimer_equipement.getText()) ;
        Connection cn =null;
        Statement st =null;
        
        try {
                        Class.forName("com.mysql.jdbc.Driver");
			cn = DriverManager.getConnection(url, login, passwd);
			st = cn.createStatement();
                        
                        if(type.equals("Ordinateur") == true)
                        {
                            String sql= "SELECT num_salle FROM Ordinateur WHERE id_ordinateur="+id_equipement+";";
                            ResultSet rs = st.executeQuery(sql);
                            int numero_salle=0;
                            while (rs.next())
                            {
                                numero_salle = rs.getInt("num_salle");
                            }
                            sql= "SELECT nb_poste_installe FROM Salle WHERE num_salle="+numero_salle+";";
                            rs = st.executeQuery(sql);
                            int nb_new_poste_installe=0;
                            while (rs.next())
                            {
                                nb_new_poste_installe = rs.getInt("nb_poste_installe");
                            }
                            nb_new_poste_installe = (nb_new_poste_installe - 1);
                            sql = "UPDATE Salle SET nb_poste_installe = "+nb_new_poste_installe+" WHERE num_salle="+numero_salle+";";
                            st.executeUpdate(sql);
                            sql = "DELETE FROM Ordinateur WHERE id_ordinateur="+id_equipement+";";
                            st.executeUpdate(sql);
                            Salle s1 = new Salle(1,"init","univ",0,0);
                            sql = "SELECT * FROM Salle;";
                            rs = st.executeQuery(sql);
                            text_area_salle.setText("");
                            while (rs.next())
                            {
                              s1.numeroSalle = rs.getInt("num_salle");
                              s1.nom = rs.getString("nom_salle");
                              s1.emplacement = rs.getString("emplacement_salle");
                              s1.nbPostePossibles = rs.getInt("nb_poste_possible");
                              s1.nbPosteInstalles = rs.getInt("nb_poste_installe");
                              text_area_salle.setEditable(false);
                              text_area_salle.setText(text_area_salle.getText()+s1.getNumeroSalle()+"\t"+s1.getNom()+"\t"+s1.getEmplacement()+"\t"+s1.getNbPostePossibles()+"\t"+s1.getNbPosteInstalles()+" \n");
                            }
                            Ordinateur o = new Ordinateur(1,"msi", "ge80", "i3", 4, "w7", "allume", "AA:BB:CC:DD:EE:FF", 1000, 1024, "portable", 1);
                            sql = "SELECT * FROM Ordinateur;";
                            rs = st.executeQuery(sql);
                            text_area_equipement.setText("");
                            while (rs.next())
                            {
                              o.id = rs.getInt("id_ordinateur");
                              o.marque = rs.getString("marque_ordinateur");
                              o.modele = rs.getString("modele_ordinateur");
                              o.cpu = rs.getString("cpu_ordinateur");
                              o.ram = rs.getInt("ram_ordinateur");
                              o.os = rs.getString("os_ordinateur");
                              o.etat = rs.getString("etat_ordinateur");
                              o.adresseMAC = rs.getString("adresse_MAC_ordinateur");
                              o.disque = rs.getInt("disque_ordinateur");
                              o.carteGraphique = rs.getInt("carte_graphique_ordinateur");
                              o.numero_salle = rs.getInt("num_salle");
                              o.mobilite = rs.getString("type_ordinateur");

                              text_area_equipement.setEditable(false);
                              text_area_equipement.setText(text_area_equipement.getText()+o.getId()+"\t"+type+"\t"+o.getMobilite()+"\t"+o.getEtat()+"\t"+o.getMarque()+"\t"+o.getModele()+"\t"+o.getCpu()+"\t"+o.getRam()+"\t"+o.getDisque()+"\t"+o.getCarteGraphique()+"\t"+o.getOs()+"\t"+o.getAdresseMAC()+"\t"+o.getNumero_salle()+"\n");
                            }
                            
                        }
                        
                        if(type.equals("Tablette") == true)
                        {
                            String sql= "SELECT num_salle FROM Tablette WHERE id_tablette="+id_equipement+";";
                            ResultSet rs = st.executeQuery(sql);
                            int numero_salle=0;
                            while (rs.next())
                            {
                                numero_salle = rs.getInt("num_salle");
                            }
                            sql= "SELECT nb_poste_installe FROM Salle WHERE num_salle="+numero_salle+";";
                            rs = st.executeQuery(sql);
                            int nb_new_poste_installe=0;
                            while (rs.next())
                            {
                                nb_new_poste_installe = rs.getInt("nb_poste_installe");
                            }
                            nb_new_poste_installe = (nb_new_poste_installe - 1);
                            sql = "UPDATE Salle SET nb_poste_installe = "+nb_new_poste_installe+" WHERE num_salle="+numero_salle+";";
                            st.executeUpdate(sql);
                            sql = "DELETE FROM Tablette WHERE id_tablette="+id_equipement+";";
                            st.executeUpdate(sql);
                            Salle s1 = new Salle(1,"init","univ",0,0);
                            sql = "SELECT * FROM Salle;";
                            rs = st.executeQuery(sql);
                            text_area_salle.setText("");
                            while (rs.next())
                            {
                              s1.numeroSalle = rs.getInt("num_salle");
                              s1.nom = rs.getString("nom_salle");
                              s1.emplacement = rs.getString("emplacement_salle");
                              s1.nbPostePossibles = rs.getInt("nb_poste_possible");
                              s1.nbPosteInstalles = rs.getInt("nb_poste_installe");
                              text_area_salle.setEditable(false);
                              text_area_salle.setText(text_area_salle.getText()+s1.getNumeroSalle()+"\t"+s1.getNom()+"\t"+s1.getEmplacement()+"\t"+s1.getNbPostePossibles()+"\t"+s1.getNbPosteInstalles()+" \n");
                            }
                            Tablette t = new Tablette(1,"dualcore", 4, "android", "allumee", "AA:BB:CC:DD:EE:CC", 32, 7, "Samsung", "tab", 1);
                            sql = "SELECT * FROM Tablette;";
                            rs = st.executeQuery(sql);
                            text_area_equipement.setText("");
                            
                            while (rs.next())
                            {
                              t.id = rs.getInt("id_tablette");
                              t.marque = rs.getString("marque_tablette");
                              t.modele = rs.getString("modele_tablette");
                              t.cpu = rs.getString("cpu_tablette");
                              t.ram = rs.getInt("ram_tablette");
                              t.os = rs.getString("os_tablette");
                              t.etat = rs.getString("etat_tablette");
                              t.adresseMAC = rs.getString("adresse_MAC_tablette");
                              t.disque = rs.getInt("disque_tablette");                            
                              t.numero_salle = rs.getInt("num_salle");
                              t.tailleEcran = rs.getInt("taille_tablette");

                              text_area_equipement.setEditable(false);
                              text_area_equipement.setText(text_area_equipement.getText()+t.getId()+"\t"+type+"\t"+t.getEtat()+"\t"+t.getMarque()+"\t"+t.getModele()+"\t"+t.getCpu()+"\t"+t.getRam()+"\t"+t.getDisque()+"\t"+t.getOs()+"\t"+t.getAdresseMAC()+"\t"+t.getTailleEcran()+"\t"+t.getNumero_salle()+"\n");
                            }
                        }
                        
                        if(type.equals("Routeur") == true)
                        {
                            String sql= "SELECT num_salle FROM Routeur WHERE id_routeur="+id_equipement+";";
                            ResultSet rs = st.executeQuery(sql);
                            int numero_salle=0;
                            while (rs.next())
                            {
                                numero_salle = rs.getInt("num_salle");
                            }
                            sql= "SELECT nb_poste_installe FROM Salle WHERE num_salle="+numero_salle+";";
                            rs = st.executeQuery(sql);
                            int nb_new_poste_installe=0;
                            while (rs.next())
                            {
                                nb_new_poste_installe = rs.getInt("nb_poste_installe");
                            }
                            nb_new_poste_installe = (nb_new_poste_installe - 1);
                            sql = "UPDATE Salle SET nb_poste_installe = "+nb_new_poste_installe+" WHERE num_salle="+numero_salle+";";
                            st.executeUpdate(sql);
                            sql = "DELETE FROM Routeur WHERE id_routeur="+id_equipement+";";
                            st.executeUpdate(sql);
                            Salle s1 = new Salle(1,"init","univ",0,0);
                            sql = "SELECT * FROM Salle;";
                            rs = st.executeQuery(sql);
                            text_area_salle.setText("");
                            while (rs.next())
                            {
                              s1.numeroSalle = rs.getInt("num_salle");
                              s1.nom = rs.getString("nom_salle");
                              s1.emplacement = rs.getString("emplacement_salle");
                              s1.nbPostePossibles = rs.getInt("nb_poste_possible");
                              s1.nbPosteInstalles = rs.getInt("nb_poste_installe");
                              text_area_salle.setEditable(false);
                              text_area_salle.setText(text_area_salle.getText()+s1.getNumeroSalle()+"\t"+s1.getNom()+"\t"+s1.getEmplacement()+"\t"+s1.getNbPostePossibles()+"\t"+s1.getNbPosteInstalles()+" \n");
                            }
                            
                            Routeur r = new Routeur(1,"Cisco", "RV042G", "IOS", "allumee", 2, 8, 1);
                            sql = "SELECT * FROM Routeur;";
                            rs = st.executeQuery(sql);
                            text_area_equipement.setText("");
                            
                            while (rs.next())
                            {
                              r.id = rs.getInt("id_routeur");
                              r.marque = rs.getString("marque_routeur");
                              r.modele = rs.getString("modele_routeur");
                              r.os = rs.getString("os_routeur");
                              r.etat = rs.getString("etat_routeur");
                              r.nbPortsGoEthernet = rs.getInt("nb_port_go_ethernet");
                              r.nbPortsLAN = rs.getInt("nb_port_lan");
                              r.numero_salle = rs.getInt("num_salle");
                              
                              text_area_equipement.setEditable(false);
                              text_area_equipement.setText(text_area_equipement.getText()+r.getId()+"\t"+type+"\t"+r.getEtat()+"\t"+r.getMarque()+"\t"+r.getModele()+"\t"+r.getOs()+"\t"+r.getNbPortsGoEthernet()+"\t"+r.getNbPortsLAN()+"\t"+r.getNumero_salle()+"\n");
                            }
                        }
                        
                } catch (SQLException e) {
                        e.printStackTrace();
                } catch (ClassNotFoundException e) {
                        e.printStackTrace();
                } finally {
                        try {
                                cn.close();
                                st.close();
                        } catch (SQLException e) {
                                e.printStackTrace();
                        }
                }        
    }//GEN-LAST:event_bouton_supprimer_equipementActionPerformed

    public void updateLabel(String ptype){
    
    
    if(ptype.equals("Routeur")){
        champ_carte_graphique.setEnabled(false);
        label_carte_graphique.setEnabled(false);
        ComboBox_Mobilite.setEnabled(false);
        label_mobilite.setEnabled(false);
        label_taille_ecran.setEnabled(false);
        champ_taille_ecran.setEnabled(false);
        label_adresse_mac.setEnabled(false);
        champ_adresse_mac.setEnabled(false);
        champ_disque.setEnabled(false);
        
        label_nombre_GE.setEnabled(true);
        champ_nb_GE.setEnabled(true);
        label_nombre_LAN.setEnabled(true);
        champ_nb_LAN.setEnabled(true);
        label_nombre_LAN.setEnabled(true);
        champ_nb_LAN.setEnabled(true);
        label_nombre_GE.setEnabled(true);
        champ_nb_GE.setEnabled(true);
    }
     if(ptype.equals("Ordinateur")){
        label_nombre_GE.setEnabled(false);
        champ_nb_GE.setEnabled(false);
        label_nombre_LAN.setEnabled(false);
        champ_nb_LAN.setEnabled(false);
        label_taille_ecran.setEnabled(false);
        champ_taille_ecran.setEnabled(false);
        
        champ_carte_graphique.setEnabled(true);
        label_carte_graphique.setEnabled(true);
        ComboBox_Mobilite.setEnabled(true);
        label_mobilite.setEnabled(true);
        label_adresse_mac.setEnabled(true);
        champ_adresse_mac.setEnabled(true);
    }
     if(ptype.equals("Tablette")){
         
        label_adresse_mac.setEnabled(true);
        champ_adresse_mac.setEnabled(true);
        label_taille_ecran.setEnabled(true);
        champ_taille_ecran.setEnabled(true);
        
        label_mobilite.setEnabled(false);
        ComboBox_Mobilite.setEnabled(false);
        label_nombre_LAN.setEnabled(false);
        champ_nb_LAN.setEnabled(false);
        label_nombre_GE.setEnabled(false);
        champ_nb_GE.setEnabled(false);
        label_carte_graphique.setEnabled(false);
        champ_carte_graphique.setEnabled(false);
        
    }
     
    if(ptype.equals("")){
        label_mobilite.setEnabled(true);
        ComboBox_Mobilite.setEnabled(true);
        label_nombre_LAN.setEnabled(true);
        champ_nb_LAN.setEnabled(true);
        label_nombre_GE.setEnabled(true);
        champ_nb_GE.setEnabled(true);
        label_carte_graphique.setEnabled(true);
        champ_carte_graphique.setEnabled(true);
        label_taille_ecran.setEnabled(true);
        champ_taille_ecran.setEnabled(true);
        ComboBox_Mobilite.setEnabled(true);
        label_mobilite.setEnabled(true);
        label_disque.setEnabled(true);
        champ_disque.setEnabled(true);
        label_adresse_mac.setEnabled(true);
        champ_adresse_mac.setEnabled(true);
        
    }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox Checkbox_allume;
    private javax.swing.JComboBox ComboBox_Mobilite;
    public javax.swing.JComboBox ComboBox_type;
    private javax.swing.JButton bouton_annuler_equipement;
    private javax.swing.JButton bouton_annuler_salle;
    private javax.swing.JButton bouton_supprimer_equipement;
    private javax.swing.JButton bouton_supprimer_salle;
    private javax.swing.JButton bouton_valider_equipement;
    private javax.swing.JButton bouton_valider_salle;
    private javax.swing.JTextField champ_adresse_mac;
    private javax.swing.JTextField champ_carte_graphique;
    private javax.swing.JTextField champ_cpu;
    private javax.swing.JTextField champ_disque;
    private javax.swing.JTextField champ_emplacement_salle;
    private javax.swing.JTextField champ_marque;
    private javax.swing.JTextField champ_modele;
    private javax.swing.JTextField champ_nb_GE;
    private javax.swing.JTextField champ_nb_LAN;
    private javax.swing.JTextField champ_num_salle;
    private javax.swing.JTextField champ_numero_salle_equipement;
    private javax.swing.JTextField champ_os;
    private javax.swing.JTextField champ_poste_installe;
    private javax.swing.JTextField champ_poste_possible;
    private javax.swing.JTextField champ_ram;
    private javax.swing.JTextField champ_salle;
    private javax.swing.JTextField champ_supprimer_equipement;
    private javax.swing.JTextField champ_supprimer_salle;
    private javax.swing.JTextField champ_taille_ecran;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel label_adresse_mac;
    private javax.swing.JLabel label_ajout_equipement;
    private javax.swing.JLabel label_ajout_salle;
    private javax.swing.JLabel label_carte_graphique;
    private javax.swing.JLabel label_cpu;
    private javax.swing.JLabel label_disque;
    private javax.swing.JLabel label_emplacement_salle;
    private javax.swing.JLabel label_equipement;
    private javax.swing.JLabel label_etat;
    private javax.swing.JLabel label_marque;
    private javax.swing.JLabel label_mobilite;
    private javax.swing.JLabel label_modele;
    private javax.swing.JLabel label_nom_salle;
    private javax.swing.JLabel label_nombre_GE;
    private javax.swing.JLabel label_nombre_LAN;
    private javax.swing.JLabel label_num_salle;
    private javax.swing.JLabel label_numero_salle_equipement;
    private javax.swing.JLabel label_os;
    private javax.swing.JLabel label_poste_installe;
    private javax.swing.JLabel label_poste_possible;
    private javax.swing.JLabel label_ram;
    private javax.swing.JLabel label_salle;
    private javax.swing.JLabel label_supprimer_equipement;
    private javax.swing.JLabel label_supprimer_salle;
    private javax.swing.JLabel label_taille_ecran;
    private javax.swing.JLabel label_type;
    private javax.swing.JTextArea text_area_equipement;
    private javax.swing.JTextArea text_area_salle;
    // End of variables declaration//GEN-END:variables
}
